buildscript {
	repositories {
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
		mavenCentral()
		maven { 
			name = 'Jitpack'
			url 'https://jitpack.io/'
		}
		maven {
			name = 'HalfOf2'
			url = 'https://storage.googleapis.com/devan-maven/'
		}
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath 'com.github.Chocohead:Fabric-Loom:d823377'
		classpath group: 'gradle.plugin.com.modrinth.minotaur', name: 'Minotaur', version: '1.2.1'
	}
}

apply plugin: 'fabric-loom'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}_v${project.mod_version}"
group = project.maven_group

repositories {
	maven { 
		name = 'Jitpack'
		url 'https://jitpack.io/'
	}
	maven {
		name = 'HalfOf2'
		url = 'https://storage.googleapis.com/devan-maven/'
	}
}

minecraft {
	//Skip old versions of libraries which Mojang use but we don't need
	addLibraryFilter {library ->
		return !(library.startsWith('net.minecraft:launchwrapper:') ||
					library.startsWith('net.sf.jopt-simple:jopt-simple:') ||
					library.startsWith('org.ow2.asm:asm-all:'))
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings "io.github.minecraft-cursed-legacy:plasma:b1.7.3-build.${project.plasma_build}"

	modImplementation("io.github.minecraft-cursed-legacy:cursed-fabric-loader:${project.loader_version}") {
		transitive false
	}

	// Compat Provider
	implementation 'com.github.macbrayne.inventory-pause-forge:compat:1.1.2'

	// Config File
	implementation 'com.moandjiezana.toml:toml4j:0.7.2'

	// @NotNull annotations
	compileOnly 'org.jetbrains:annotations:21.0.1'
}

processResources {
	inputs.property 'version', project.version

	from(sourceSets.main.resources.srcDirs) {
		include 'fabric.mod.json'
		expand 'version': project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'fabric.mod.json'
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}


import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
	onlyIf {
		System.getenv("MODRINTH") // Only attempt to run this task if the MODRINTH variable is set, otherwise SKIP it
	}

	token = System.getenv("MODRINTH") // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
	projectId = 'pBbOtJk2'
	versionNumber = "${project.mod_version}" // Will fail if Modrinth has this version already
	// On fabric, use 'remapJar' instead of 'jar'
	uploadFile = jar // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
	addGameVersion('b1.7.3') // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
	addLoader('fabric')
}

tasks.withType(AbstractArchiveTask).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}